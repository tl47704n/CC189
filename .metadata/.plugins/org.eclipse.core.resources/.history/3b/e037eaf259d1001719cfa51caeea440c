import linkedlist.DeleteMid;
import linkedlist.FindKthLastNode;
import linkedlist.LinkedListNode;
import linkedlist.PartitionLinklist;
import linkedlist.RemoveDupNoHash;
import linkedlist.RemoveDups;
import linkedlist.ToKthEnd;

public class Main {
	public static void main(String[] args) {
	/*	String a="abcef";
		UniqueString b = new UniqueString(a);
		//System.out.println(b.checkUnique(a));
		
		
		String x="eog";
		String y="god";
		PermutationOfString aa = new PermutationOfString();
		System.out.println(aa.isPermutation(x, y));
		System.out.println(aa.isPermutation2(x, y));
		
		int[] letters=new int[128];
		System.out.println(++letters['a']);
		System.out.println(letters['b']);
		*/
	
		/*String temp;
		ReplaceSpace rep = new ReplaceSpace();
		temp="Mr John Smith          ";
		char[] s = temp.toCharArray();
		
		rep.replaceSpace(s, 13);
		
		System.out.println(s);
		*/ 
		
		/*
		PermutationOfPalindrome t=new PermutationOfPalindrome();
		System.out.println(t.checkPOP("levell"));
		*/
		/*
		OneWay obj = new OneWay();
		
		System.out.println(obj.editIsLegal("pale", "ple"));
		System.out.println(obj.editIsLegal("pales", "pale"));
		System.out.println(obj.editIsLegal("pale", "bale"));
		System.out.println(obj.editIsLegal("pale", "bae"));
		*/
		/*
		StringCompressdion str=new StringCompressdion();
		System.out.println(str.compression("abc"));
		*/
		//int[][] matrix= {{1,2,3},
		//				 {4,0,6},
		//				 {7,8,9}};
		/*
		RotateMatrix r = new RotateMatrix();
		r.rotate(matrix);
		for(int row=0;row<3;row++) {
			for(int col=0;col<3;col++) {
				System.out.print(matrix[row][col]);				
			}
			System.out.print("\n");
		}
		*/
		/*ZeroMatrix e=new ZeroMatrix();
		e.setZeroRowCol(matrix);
		
		for(int row=0;row<3;row++) {
			for(int col=0;col<3;col++) {
				System.out.print(matrix[row][col]);				
			}
			System.out.print("\n");
		}
		*/
		LinkedListNode n1 = new LinkedListNode(3);
		LinkedListNode n2 = new LinkedListNode(5);
		LinkedListNode n3 = new LinkedListNode(2);
		LinkedListNode n4 = new LinkedListNode(1);
		LinkedListNode n5 = new LinkedListNode(4);
		LinkedListNode n6 = new LinkedListNode(6);
		n1.next=n2;
		n2.next=n3;
		n3.next=n4;
		n4.next=n5;
		n5.next=n6;
		/*
		RemoveDups d = new RemoveDups();
		d.removeDups(n1);
		System.out.println(n1.data+"  "+n1.next.data);
		*/
		
		/*
		RemoveDupNoHash d = new RemoveDupNoHash();
		d.removeDup(n1);
		System.out.println(n1.data+"  "+n1.next.data);
		*/
		//FindKthLastNode k=new FindKthLastNode();
		
		//System.out.println(k.findKthLastNode(n1, 5).data);
		
	//	ToKthEnd t = new ToKthEnd();
	//	System.out.println(t.toKthEnd(n1, 5).data);
	/*	DeleteMid d = new DeleteMid();
		d.deleteMid(n3);
		while(n1!=null) {
		System.out.println(n1.data);
		n1=n1.next;
		}
	*/
		PartitionLinklist p = new PartitionLinklist();
		LinkedListNode result=p.partition(n1, 3);
		while(result!=null) {
		System.out.println(result.data);
		result=result.next;
		}
	}
}
